Project Snapshot — Active Narrative Threads (updated 2025-09-08)

Theme: Close the loop between promise and delivery in three areas: (1) uninterrupted TUI edit/browse; (2) --save pipeline composes with git and reflects final staged diff; (3) safety rails + observability make tool effects auditable and reversible.

Thread A — TUI editing and responsiveness
Conflict: Editing exits the app; scroll lacks bounds and page keys; editor shell args duplicated; TODO filtering missing.

Concrete scenes (code-bound):
- Persist edits without terminating the app
  • vizier-tui/src/lib.rs::App::enter_directory(): remove std::process::exit(0); after user_editor(), re-enter alt screen + raw mode and refresh selection/preview.
- Editor write-back + fallback
  • vizier-tui/src/lib.rs::user_editor(path, contents): write temp, launch $EDITOR; on return, write temp contents back to original file; default to vi/notepad if $EDITOR unset; one-time warning when falling back.
- Clean spinner/status rendering
  • vizier-tui/src/lib.rs::display_status(): use MoveToColumn(0) + Clear(ClearType::CurrentLine) prior to printing spinner (if/when status UI exists in this crate).
- In-TUI edit binding
  • vizier-tui/src/lib.rs::list_tui(): bind 'e' to edit current file via user_editor(); on success, reload content and redraw.
- Bounded scrolling + jump keys
  • Clamp scroll to visible height; implement PageUp/PageDown=height-1 and Home/End in list_tui()/ui().
- Focused TODO browsing
  • vizier-tui/src/lib.rs::App::refresh_files(): when browsing TODO dir (tools::get_todo_dir or .vizier/todos), include only *.md and skip dotfiles.
- Shell arg duplication fix
  • vizier-tui/src/lib.rs::user_editor(): use Shell::get_interactive_args() as-is; do not append extra "-c" if already provided.
- Error logging
  • Failures append to .vizier/logs/errors.jsonl with {ts, source:"tui", action, path, message}.

Acceptance: Editing returns to TUI with saved changes; scroll bounded with page/home/end; 'e' edits file; no duplicate -c flag; errors logged.

Thread B — Version-control composability for --save
Conflict: Commit uses pre-staged diff; help text must reflect -m/-M exclusivity; audit anchor trailer missing.

Concrete scenes (code-bound):
- Commit from final, staged diff
  • vizier-cli/src/main.rs: after LLM updates and git add -u, recompute diff and feed to commit message generation; then commit.
- Extract save flow
  • vizier-cli/src/main.rs::save_project() that orchestrates: (a) run tools to update snapshot/TODOs, (b) git add -u, (c) recompute diff, (d) generate message, (e) commit.
- Correct help text
  • vizier-cli/src/main.rs::print_usage(): ensure -m/-M documented as mutually exclusive; examples use -s/--save and -S/--save-latest consistently.
- First-run robustness
  • vizier-core::tools::load_todos(): create .vizier/ and empty todos.json if missing, return Ok(empty).
- Audit trailer linkage
  • save_project(): if vizier_core::file_tracking::staged_fingerprint() -> Some(anchor), append "Audit-Anchor: <anchor>" trailer to commit.

Acceptance: --save reflects final staged diff (including .vizier), help text correct, first-run OK, commit includes Audit-Anchor when available.

Thread C — Safety rails, observability, and reversible effects
Conflict: Tool calls opaque; failures hard to attribute; no dry-run switch.

Concrete scenes (code-bound):
- Conversation/LLM audit log
  • vizier-core::auditor/tools: append to .vizier/logs/llm_audit.jsonl per tool plan/result with ts, tool, args, truncated result, token counts, correlation_id.
- Execution plan capture + SAFE_APPLY gate
  • vizier-core::auditor: write plan events to .vizier/logs/plan.jsonl; if SAFE_APPLY unset, persist plan and return dry-run summary; when set, execute and record outcomes.
- Error reporting and user event tracing
  • vizier-core::auditor + vizier-tui/src/chat.rs: on tool error, emit .vizier/logs/errors.jsonl with context (thread, path, command, stderr) and concise UI message.

Acceptance: Every tool call produces audit; plans captured; SAFE_APPLY gates execution; errors visible and logged; fresh repos don’t crash.

Status since last update:
- Conflicts and scenes validated against current code pointers in vizier-tui/src/lib.rs and vizier-cli/src/main.rs; help text still needs exclusivity emphasis; .vizier first-run guards not present yet.
- TODO files aligned below; duplicates merged into single threads for TUI, VCS composability, and safety/observability.
