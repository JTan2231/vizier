Running Snapshot — updated

Narrative theme
- Operators get explicit control over AI changes with gates, reversibility, and durable narrative context. Snapshot is the single-frame truth; Git is code-audit; sessions JSON becomes conversation/runtime audit.

Active threads
- Commit isolation + gates: Conversation commits isolated and pause at a Pending Commit gate. TUI/CLI UX partly landed; per-hunk accept/reject planned.
- Control levers surface: Config levers (history_limit, confirm_destructive, auto_commit, non_interactive, model params, system_prompt_override, thinking level). Thinking level requested; schema in progress.
- Operation history + revert: Not built yet; planned.
- Native Chat + Diff/editor basics: Split-view with diff and editable commit message; long multiline messages + scrolling stable.
- Integration tests: Guard commit isolation, config→CLI mapping, and (as they land) history/revert.
- Issue tracking bridge: Use GitHub Issues for task-specific items; keep narratives/gates inside Vizier.
- Chat navigation modes: View vs Edit modes to prevent accidental edits; input handling work pending.
- Config-driven prompt customization: Swap system prompts via files/CLI; reflect active path in meta/header.
- Snapshot bootstrap for existing repos: Generate initial .vizier/.snapshot + seed TODOs; safe/idempotent.
- Narrative timelines: Persistent “threads” with IDs; TODOs cross-link to threads.
- Interactive Config TUI: In-app panel to view/edit effective config; precedence-aware; persist to profile.
- NEW — Session logging to filesystem: Persist each assistant session as structured JSON in .vizier/sessions/<id>/session.json for reloadability. Forms the basis for a TUI picker and CLI --session <id> resume.

Recent, landed
- TUI chat rendering fixed for long multiline messages + basic scrolling.
- Editor lifecycle hardened (ExitReason; scoped editor channel).
- Auditor fixes: staged-set isolation; VCS helpers across A/M/D/R.
- Integration tests added and run in CI.

Deferred
- Narrative contract/drift enforcement and pre-commit hook.
- Full streaming timeline; minimal streaming visibility optional.

Acceptance checkpoints (selected)
- Pending Commit gate with confirm_destructive=true and auto_commit=false.
- Conversation commits only touch .vizier; preserve pre-existing staged changes exactly (A/M/D/R).
- Non-interactive CLI requires explicit consent; never opens editor.
- TUI chat renders long messages and supports scrolling.
- Chat modes show visible state; View mode blocks edits.
- Config-driven prompt selection visible in meta and header.
- Snapshot bootstrap command is safe/idempotent.
- Thinking level selection precedence: CLI > session > profile > default.
- NEW — Session JSON: On session end, session.json is written and validates MVP schema; write-once with atomic rename.

Next moves (minimal sequence)
1) Finalize config schema; expose to prompt/meta (system_prompt path, thinking_level).
2) Add CLI flags (--system-prompt-override, --thinking-level, --profile).
3) Commit gate UX across TUI/CLI/headless.
4) History skeleton with revert(n=1).
5) Session logging JSON MVP: write/validate session.json and add `vizier sessions list`; load via `--session <id>`.
6) Extend tests for flags, persistence, commit gate, TUI regressions, session write/read.
7) Chat modes with key help and remapping; tests.
8) Config TUI panel; precedence/persistence tests.
9) Narrative timelines: Threads section + TODO cross-links.
10) Issues bridge docs and/or helper.